(set-logic HORN)
(declare-fun P2 (Bool) Bool)
(declare-fun P0 (Int) Bool)
(declare-fun P1 (Int) Bool)
(declare-fun P3 (Int) Bool)
(declare-fun P6 (Int) Bool)
(declare-fun P4 (Int) Bool)
(declare-fun P5 (Int) Bool)
(assert (forall ((r1 Int) (r0 Int)) (=> (and (P1 r1) (P0 r0)) (P2 (= r1 r0)))))
(assert (P0 0))
;; (assert (P3 10))
;; (assert (forall ((r Int)) (=> (P3 r) (P1 r))))
;; (assert (forall ((x Int)) (=> (and (not (= x 0)) (X x)) (X (- x 1)))))
(assert (forall ((r Int) (r4 Int)) (=> (and (P1 r) (P4 r4)) (P6 (- r r4)))))
(assert (P4 1))
(assert (forall ((r Int)) (=> (P6 r) (P1 r))))
(assert (=> (P2 true) false))
;; (assert (forall ((b Bool)) (=> (and (P2 b) (= b false)) false)))
(check-sat)
(get-model)
;; (10 | stub - 1) = 0
