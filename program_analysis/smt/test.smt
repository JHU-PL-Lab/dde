(set-logic HORN)
(set-option :fp.xform.inline_linear false)
(set-option :fp.xform.inline_eager false)
(declare-fun P0 (Bool) Bool)
(declare-fun P1 (Int) Bool)
(declare-fun P2 (Int) Bool)
(declare-fun P3 (Bool) Bool)
(declare-fun P4 (Int) Bool)
(declare-fun P5 (Int) Bool)
(declare-fun P6 (Int) Bool)
(declare-fun P7 (Int) Bool)
(declare-fun P8 (Int) Bool)
(declare-fun P9 (Int) Bool)
(declare-fun P10 (Int) Bool)
(declare-fun P11 (Int) Bool)
(declare-fun P12 (Int) Bool)
(declare-fun P13 (Int) Bool)
(declare-fun P14 (Int) Bool)
(declare-fun P15 (Int) Bool)
(declare-fun P16 (Int) Bool)
(declare-fun P17 (Int) Bool)
(declare-fun P18 (Int) Bool)
(declare-fun P19 (Int) Bool)
; (((((((-1)^n - 1) | ((stub@n) - 1)))^n - 1))^n = 0)
(assert (forall ((r Bool)) (=> (P0 r) (= r true))))
(assert (forall ((r Int)) (=> (and (P17 r) true) (P2 r))))
(assert (forall ((r Int)) (=> (and (P8 r) true) (P16 r))))
(assert (forall ((r Int)) (=> (P11 r) (P10 r))))
(assert (P12 1))
(assert (forall ((r Int)) (=> (and (P15 r) true) (P5 r))))
(assert (P19 0))
(assert (forall ((r Int)) (=> (P16 r) (P15 r))))
(assert (forall ((r1 Int) (r2 Int)) (=> (and (P13 r1) (P4 r2) true) (P14 (- r1 r2)))))
(assert (forall ((r Int)) (=> (and (P12 r) true) (P4 r))))
(assert (forall ((r Int)) (=> (P18 r) (P17 r))))
(assert (forall ((r Int)) (=> (and (P14 r) true) (P16 r))))
(assert (forall ((r1 Int) (r2 Int)) (=> (and (P5 r1) (P4 r2) true) (P6 (- r1 r2)))))
(assert (forall ((r Int)) (=> (and (P10 r) true) (P7 r))))
(assert (forall ((r Int)) (P15 r)))
(assert (forall ((r Int)) (=> (and (P15 r) true) (P13 r))))
(assert (forall ((r Int)) (=> (and (P6 r) true) (P18 r))))
(assert (forall ((r Int)) (=> (and (P19 r) true) (P1 r))))
(assert (P9 (- 1)))
(assert (forall ((r Bool)) (=> (and (P3 r) true) (P0 r))))
(assert (forall ((r1 Int) (r2 Int)) (=> (and (P2 r1) (P1 r2) true) (P3 (= r1 r2)))))
(assert (forall ((r1 Int) (r2 Int)) (=> (and (P7 r1) (P4 r2) true) (P8 (- r1 r2)))))
(assert (forall ((r Int)) (=> (and (P9 r) true) (P11 r))))
(check-sat)
(get-model)