(set-logic HORN)
(set-option :fp.xform.inline_linear false)
(set-option :fp.xform.inline_eager false)
(declare-fun P20 (Int) Bool)
(declare-fun P11 (Int) Bool)
(declare-fun P1 (Int) Bool)
(declare-fun P14 (Int) Bool)
(declare-fun P15 (Int) Bool)
(declare-fun P10 (Int) Bool)
(declare-fun P8 (Int) Bool)
(declare-fun P9 (Int) Bool)
(declare-fun P19 (Int) Bool)
(declare-fun P5 (Int) Bool)
(declare-fun P3 (Int) Bool)
(declare-fun P4 (Int) Bool)
(declare-fun P6 (Int) Bool)
(declare-fun P7 (Int) Bool)
(declare-fun P2 (Int) Bool)
(declare-fun P17 (Int) Bool)
(declare-fun P12 (Int) Bool)
(assert (P20 2))
(assert (P11 1))
(assert (forall ((r Int)) (=> (P1 r) (>= r 2))))
(assert (forall ((r Int)) (=> (and (P15 r) true) (P14 r))))
(assert (forall ((r1 Int) (r2 Int)) (=> (and (P9 r1) (P8 r2) true) (P10 (+ r1 r2)))))
(assert (forall ((r Int)) (=> (and (P20 r) true) (P19 r))))
(assert (forall ((r1 Int) (r2 Int)) (=> (and (P4 r1) (P3 r2) true) (P5 (+ r1 r2)))))
(assert (forall ((r Int)) (=> (and (P11 r) true) (P9 r))))
(assert (forall ((r Int)) (=> (and (P6 r) true) (P4 r))))
(assert (forall ((r Int)) (=> (and (P10 r) true) (P7 r))))
(assert (forall ((r Int)) (=> (and (P2 r) true) (P1 r))))
(assert (forall ((r Int)) (=> (and (P19 r) true) (P1 r))))
(assert (forall ((r Int)) (=> (and (P5 r) true) (P2 r))))
(assert (forall ((r Int)) (=> (and (P7 r) true) (P17 r))))
(assert (forall ((r Int)) (P12 r)))
(assert (forall ((r Int)) (=> (P17 r) (P12 r))))
(assert (P15 0))
(assert (P6 3))
(assert (forall ((r Int)) (=> (and (P12 r) true) (P3 r))))
(assert (forall ((r Int)) (=> (and (P14 r) true) (P17 r))))
(assert (forall ((r Int)) (=> (and (P12 r) true) (P8 r))))
(check-sat)
(get-model)